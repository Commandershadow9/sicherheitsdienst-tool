generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Benutzer/Mitarbeiter
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(EMPLOYEE)
  isActive  Boolean  @default(true)
  
  // Arbeitsbezogene Informationen
  employeeId     String?  @unique
  hireDate       DateTime?
  qualifications String[] // Array von Qualifikationen
  pushOptIn      Boolean  @default(true)
  emailOptIn     Boolean  @default(true)
  
  // Zeitstempel
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Beziehungen
  shifts        ShiftAssignment[]
  timeEntries   TimeEntry[]
  incidents     Incident[]

  @@map("users")
  @@index([lastName, firstName], name: "users_name_idx")
  @@index([createdAt], name: "users_createdAt_idx")
  @@index([isActive], name: "users_isActive_idx")
  @@index([role], name: "users_role_idx")
  deviceTokens DeviceToken[]
}

// Einsatzorte/Sites
model Site {
  id         String   @id @default(cuid())
  name       String
  address    String
  city       String
  postalCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Beziehungen
  shifts     Shift[]
  events     Event[]

  @@unique([name, address], name: "sites_name_address_key")
  @@map("sites")
  @@index([name], name: "sites_name_idx")
  @@index([city], name: "sites_city_idx")
  @@index([postalCode], name: "sites_postal_idx")
}

// Benutzerrollen
enum UserRole {
  ADMIN
  MANAGER
  DISPATCHER
  EMPLOYEE
}

// Schichten/Dienste
model Shift {
  id          String    @id @default(cuid())
  siteId      String?
  site        Site?     @relation(fields: [siteId], references: [id])
  title       String
  description String?
  location    String
  startTime   DateTime
  endTime     DateTime
  
  // Anforderungen
  requiredEmployees Int      @default(1)
  requiredQualifications String[]
  
  // Status
  status      ShiftStatus @default(PLANNED)
  
  // Zeitstempel
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Beziehungen
  assignments ShiftAssignment[]
  timeEntries TimeEntry[]

  @@map("shifts")
  @@index([startTime], name: "shifts_startTime_idx")
  @@index([status], name: "shifts_status_idx")
  @@index([siteId, startTime], name: "shifts_site_start_idx")
}

enum ShiftStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}

// Zuweisungen von Mitarbeitern zu Schichten
model ShiftAssignment {
  id     String @id @default(cuid())
  
  // Beziehungen
  userId  String
  shiftId String
  user    User   @relation(fields: [userId], references: [id])
  shift   Shift  @relation(fields: [shiftId], references: [id])
  
  // Status
  status AssignmentStatus @default(ASSIGNED)
  
  // Zeitstempel
  assignedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([userId, shiftId])
  @@map("shift_assignments")
  @@index([shiftId], name: "shift_assignments_shift_idx")
}

enum AssignmentStatus {
  ASSIGNED
  CONFIRMED
  STARTED
  COMPLETED
  CANCELLED
}

// Zeiterfassung
model TimeEntry {
  id String @id @default(cuid())
  
  // Beziehung
  userId String
  user   User   @relation(fields: [userId], references: [id])
  shiftId String?
  shift   Shift?  @relation(fields: [shiftId], references: [id])
  
  // Zeitdaten
  startTime DateTime
  endTime   DateTime?
  breakTime Int?      // Pause in Minuten
  
  // Location (Optional f체r GPS)
  startLocation String?
  endLocation   String?
  
  // Notizen
  notes String?
  
  // Zeitstempel
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("time_entries")
  @@index([userId, startTime], name: "time_entries_user_start_idx")
}

// Vorf채lle
model Incident {
  id          String   @id @default(cuid())
  title       String
  description String
  severity    IncidentSeverity
  status      IncidentStatus @default(OPEN)
  
  // Ort und Zeit
  location  String
  occurredAt DateTime
  
  // Beziehung
  reportedBy String
  user       User   @relation(fields: [reportedBy], references: [id])
  
  // Zeitstempel
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("incidents")
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// Eins채tze / Events
model Event {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  siteId              String?
  site                Site?    @relation(fields: [siteId], references: [id])
  startTime           DateTime
  endTime             DateTime
  serviceInstructions String
  assignedEmployeeIds String[]
  status              EventStatus @default(PLANNED)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("events")
  @@index([startTime], name: "events_start_idx")
  @@index([siteId, startTime], name: "events_site_start_idx")
}

enum EventStatus {
  PLANNED
  ACTIVE
  DONE
  CANCELLED
}

// Push-Ger채te-Token
enum DevicePlatform {
  IOS
  ANDROID
  WEB
}

model DeviceToken {
  id          String         @id @default(cuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  platform    DevicePlatform
  token       String         @unique
  isActive    Boolean        @default(true)
  notificationsEnabled Boolean @default(true)
  lastUsedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("device_tokens")
  @@index([userId], name: "device_tokens_user_idx")
}
