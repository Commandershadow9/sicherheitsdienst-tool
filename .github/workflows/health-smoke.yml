name: health-smoke

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '17 03 * * *'
  workflow_dispatch: {}

concurrency:
  group: health-smoke
  cancel-in-progress: true

jobs:
  smoke:
    runs-on: ubuntu-latest
    env:
      SLA_MAX_MS: 500
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install & Build (backend)
        working-directory: backend
        run: |
          (npm ci --no-audit --prefer-offline || npm install --no-audit)
          npm run build --if-present

      - name: Ensure jq
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Start app (PORT 3000)
        working-directory: backend
        run: |
          set -euo pipefail
          PORT=3000 node dist/server.js > server.log 2>&1 & echo $! > server.pid
          for i in $(seq 1 30); do
            if curl -fsS http://localhost:3000/healthz >/dev/null; then
              echo "App is up"
              exit 0
            fi
            sleep 1
          done
          echo "App failed to start in time" >&2
          exit 1

      - name: Smoke: /healthz
        run: |
          curl -sS http://localhost:3000/healthz | tee healthz.json | jq -e '.status=="ok"'

      - name: Smoke: /readyz
        run: |
          curl -sS http://localhost:3000/readyz | tee readyz.json | jq -e '.status=="ready" or .status=="not-ready"'

      - name: SLA check: /healthz p95 latency < ${{ env.SLA_MAX_MS }}ms (20x)
        run: |
          set -euo pipefail
          max_ms=${SLA_MAX_MS}
          : > lat.txt
          for i in $(seq 1 20); do
            t=$(curl -s -o /dev/null -w '%{time_total}' http://localhost:3000/healthz)
            ms=$(python3 - <<PY
val = float("$t") * 1000
print(int(val))
PY
)
            echo "$ms" | tee -a lat.txt
          done
          sort -n lat.txt -o lat.txt
          # p95 index for n=20 â†’ ceil(0.95*n)=19 (1-based)
          p95=$(awk 'NR==19{print; exit}' lat.txt)
          echo "p95 latency: ${p95}ms (threshold ${max_ms}ms)"
          if [ -z "$p95" ] || [ "$p95" -gt "$max_ms" ]; then
            echo "::error::/healthz p95 SLA breach: ${p95}ms > ${max_ms}ms"; exit 1
          fi

      - name: Upload health-smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-smoke-report
          path: |
            backend/server.log
            healthz.json
            readyz.json

      - name: Dump server logs on failure
        if: failure()
        working-directory: backend
        run: |
          echo '======= server.log (last 300 lines) ======='
          tail -n 300 server.log || true
          echo '==========================================='

      - name: Stop app
        if: always()
        working-directory: backend
        run: |
          kill $(cat server.pid) || true
      - name: Set SLA by trigger
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then echo "SLA_MAX_MS=700" >> $GITHUB_ENV; fi
