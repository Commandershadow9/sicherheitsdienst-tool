name: Notify Discord (All Events, pretty + Changelog + Retry)

on:
  workflow_dispatch: {}            # manueller Test-Trigger
  push:                            # ALLE Branches & Tags
    tags:
      - 'v*'
  pull_request:
    types: [opened, synchronize, reopened, closed, ready_for_review, converted_to_draft]
  workflow_run:                    # CI-Ergebnisse
    workflows: [ "ci", "CI", "build", "test" ]   # -> an EURE Workflow-Namen anpassen!
    types: [completed]
  release:
    types: [published]

permissions:
  contents: read

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (f√ºr push/release/dispatch n√∂tig)
        if: ${{ github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq & curl present
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Build Discord payload
        id: build
        shell: bash
        env:
          GH_EVENT_JSON: ${{ toJson(github.event) }}
        run: |
          set -euo pipefail

          esc_json () { python3 - << 'PY'
import sys, json
print(json.dumps(sys.stdin.read())[1:-1])
PY
          }

          trim () { # trim to N chars
            local N="$1"; shift
            local s="$(cat)"
            local len="${#s}"
            if [ "$len" -le "$N" ]; then printf "%s" "$s"; else printf "%s‚Ä¶ (gek√ºrzt)" "${s:0:$((N-12))}"; fi
          }

          actor="${{ github.actor }}"
          repo="${{ github.repository }}"
          repo_url="https://github.com/${repo}"
          run_url="https://github.com/${repo}/actions/runs/${{ github.run_id }}"
          avatar="https://github.com/${actor}.png"
          ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          event="${{ github.event_name }}"

          TITLE=""
          DESC=""
          COLOR=5793266
          ICON="https://raw.githubusercontent.com/primer/octicons/main/icons/info-24.svg"
          FIELDS="[]"

          if [ "$event" = "workflow_dispatch" ]; then
            # Manuelle Test-Nachricht
            TITLE="üîî Testbenachrichtigung"
            DESC="Manuell ausgel√∂st von **${actor}**\n${run_url}"
            COLOR=4437377
            ICON="https://raw.githubusercontent.com/primer/octicons/main/icons/bell-24.svg"
            FIELDS=$(cat <<JSON
[
  { "name": "Repository", "value": "$(printf "%s" "$repo_url" | esc_json)" }
]
JSON
)
          elif [ "$event" = "push" ]; then
            ref="${GITHUB_REF_NAME}"
            sha="${GITHUB_SHA}"
            short_sha="${sha:0:7}"
            before="$(echo "$GH_EVENT_JSON" | jq -r '.before // ""')"
            compare_url="${repo_url}/compare/${before}...${sha}"

            COMMITS_RAW="$(echo "$GH_EVENT_JSON" | jq -r '
              (.commits // [])[0:10][]?
              | "- **" + (.id[0:7]) + "**: " + ((.message // "") | gsub("\n"; " ")) + "  ‚Äî _" + ((.author.username // .author.name) // "unknown") + "_"
            ')"
            [ -z "$COMMITS_RAW" ] && COMMITS_RAW="- (keine Commits √ºbermittelt)"
            COMMITS_ESC="$(printf "%s" "$COMMITS_RAW" | esc_json)"

            TITLE="üì¶ Push auf ${repo} ‚Äî ${ref}"
            DESC="**Akteur:** ${actor}\n**Branch:** ${ref}\n**SHA:** \`${short_sha}\`\n**Vergleich:** ${compare_url}"
            COLOR=5814783
            ICON="https://raw.githubusercontent.com/primer/octicons/main/icons/upload-24.svg"
            FIELDS=$(cat <<JSON
[
  { "name": "Commits", "value": "$COMMITS_ESC" },
  { "name": "Links", "value": "$(printf "‚Ä¢ Repo: %s\n‚Ä¢ Actions: %s" "$repo_url" "$run_url" | esc_json)" }
]
JSON
)
          elif [ "$event" = "pull_request" ]; then
            pr_title='${{ github.event.pull_request.title }}'
            pr_num='${{ github.event.pull_request.number }}'
            pr_state='${{ github.event.pull_request.state }}'
            pr_merged='${{ github.event.pull_request.merged }}'
            pr_url='${{ github.event.pull_request.html_url }}'
            base='${{ github.event.pull_request.base.ref }}'
            head='${{ github.event.pull_request.head.ref }}'
            draft='${{ github.event.pull_request.draft }}'

            TITLE="üîÄ PR #${pr_num}: ${pr_title}"
            status_emoji="üü¢"
            [ "$pr_state" != "open" ] && status_emoji="üü°"
            [ "${pr_merged}" = "true" ] && status_emoji="üü£"
            [ "${draft}" = "true" ] && status_emoji="‚ö™"
            DESC="${status_emoji} **Status:** ${pr_state}  |  **Merged:** ${pr_merged}\n**Akteur:** ${actor}\n${pr_url}"
            COLOR=9055202
            ICON="https://raw.githubusercontent.com/primer/octicons/main/icons/git-pull-request-24.svg"
            FIELDS=$(cat <<JSON
[
  { "name": "Basis ‚Üí Head", "value": "$(printf "\`%s\` ‚Üí \`%s\`" "$base" "$head" | esc_json)" },
  { "name": "Repository", "value": "$(printf "%s" "$repo_url" | esc_json)" }
]
JSON
)
          elif [ "$event" = "workflow_run" ]; then
            name='${{ github.event.workflow_run.name }}'
            conc='${{ github.event.workflow_run.conclusion }}'
            TITLE="üß™ CI: ${name}"
            case "$conc" in
              success) COLOR=4437377; status="‚úÖ Erfolg";;
              failure) COLOR=13631488; status="‚ùå Fehlgeschlagen";;
              cancelled) COLOR=14540253; status="‚èπÔ∏è Abgebrochen";;
              skipped) COLOR=15132390; status="‚è≠Ô∏è √úbersprungen";;
              *) COLOR=8421504; status="‚ÑπÔ∏è ${conc}";;
            esac
            DESC="**Akteur:** ${actor}\n**Ergebnis:** ${status}\n${run_url}"
            ICON="https://raw.githubusercontent.com/primer/octicons/main/icons/checklist-24.svg"
            FIELDS=$(cat <<JSON
[
  { "name": "Workflow", "value": "$(printf "%s" "$name" | esc_json)" },
  { "name": "Repository", "value": "$(printf "%s" "$repo_url" | esc_json)" }
]
JSON
)
          elif [ "$event" = "release" ]; then
            tag='${{ github.event.release.tag_name }}'
            rname='${{ github.event.release.name }}'
            rurl='${{ github.event.release.html_url }}'
            [ -z "$rurl" ] && rurl="${repo_url}/releases/tag/${tag}"

            TITLE="üè∑Ô∏è Release ${tag}"
            [ -n "$rname" ] && TITLE="üè∑Ô∏è ${rname} (${tag})"
            DESC="**Repository:** ${repo}\n**Akteur:** ${actor}\n**Release:** ${rurl}"
            COLOR=5793266
            ICON="https://raw.githubusercontent.com/primer/octicons/main/icons/tag-24.svg"

            version="${tag#v}"
            CHANGELOG_SECTION=""
            if [ -f CHANGELOG.md ]; then
              CHANGELOG_SECTION="$(awk -v ver="$version" '
                BEGIN{found=0}
                tolower($0) ~ "^##[[:space:]]*\\[?v?" tolower(ver) "\\]?" { if(!found){found=1; next} }
                found && /^##[[:space:]]*\[?v?[0-9]/ {exit}
                found {print}
              ' CHANGELOG.md)"
            fi
            [ -z "$CHANGELOG_SECTION" ] && CHANGELOG_SECTION="(Kein spezifischer Changelog-Eintrag f√ºr ${tag} gefunden.)"

            CLEAN_SECTION="$(printf '%s' "$CHANGELOG_SECTION")"
            if [ "${#CLEAN_SECTION}" -gt 1000 ]; then
              CLEAN_SECTION="${CLEAN_SECTION:0:1000}\n‚Ä¶ (gek√ºrzt)"
            fi

            FIELDS=$(cat <<JSON
[
  { "name": "√Ñnderungen (CHANGELOG)", "value": "$(printf "%s" "$CLEAN_SECTION" | esc_json)" },
  { "name": "Links", "value": "$(printf "‚Ä¢ Repo: %s\n‚Ä¢ Actions: %s\n‚Ä¢ Tag: %s" "$repo_url" "$run_url" "$rurl" | esc_json)" }
]
JSON
)
          fi

          title_json="$(printf "%s" "$TITLE" | esc_json)"
          desc_json="$(printf "%s" "$DESC" | esc_json)"

          cat > payload.json <<JSON
{
  "username": "GitHub ¬∑ ${repo}",
  "avatar_url": "${avatar}",
  "embeds": [
    {
      "title": "${title_json}",
      "description": "${desc_json}",
      "color": ${COLOR},
      "timestamp": "${ts}",
      "thumbnail": { "url": "${ICON}" },
      "fields": ${FIELDS},
      "footer": { "text": "Automatische Benachrichtigung ‚Ä¢ $(date -u +%Y-%m-%d)" }
    }
  ]
}
JSON

          echo "payload=$(base64 -w0 < payload.json)" >> "$GITHUB_OUTPUT"

      - name: Send to Discord (with retry)
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        shell: bash
        run: |
          set -euo pipefail
          test -n "$WEBHOOK" || { echo "Secret DISCORD_WEBHOOK fehlt"; exit 1; }
          echo "${{ steps.build.outputs.payload }}" | base64 -d > payload.json

          # bis zu 5 Versuche (z.B. bei 429 Rate Limit)
          for i in 1 2 3 4 5; do
            http_code=$(curl -sS -H "Content-Type: application/json" -d @payload.json "$WEBHOOK" -o resp.txt -w "%{http_code}")
            echo "Discord HTTP: $http_code (try $i)"
            if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
              echo "OK"; break
            fi
            cat resp.txt || true
            sleep $((i*2))
          done

          # finaler Check
          test "$http_code" -ge 200 -a "$http_code" -lt 300
