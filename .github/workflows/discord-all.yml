name: Notify Discord

on:
  workflow_dispatch: {}              # manueller Test-Trigger (Run workflow)
  push:
    branches:
      - main                         # passe bei Bedarf an (oder nutze '**' für alle)
    tags:
      - 'v*'                         # Releases per Tag
  pull_request:
    types: [opened, synchronize, reopened, closed, ready_for_review, converted_to_draft]
  workflow_run:                      # CI/Smoke-Ergebnisse melden
    workflows: [ "ci", "CI", "build", "test", "health-smoke", "metrics-smoke", "docker-release" ]   # muss den Workflow-Namen(en) entsprechen
    types: [completed]
  release:
    types: [published]

permissions:
  contents: read
  actions: read

jobs:
  notify:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      # Checkout nur wenn wir Dateien brauchen (push/release/dispatch)
      - name: Checkout
        if: ${{ github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq, curl, python3 present
        run: sudo apt-get update && sudo apt-get install -y jq curl python3

      - name: Build Discord payload
        id: build
        shell: bash
        env:
          GH_EVENT_JSON: ${{ toJson(github.event) }}
        run: |
          set -euo pipefail

          esc_json () { python3 -c 'import sys, json; print(json.dumps(sys.stdin.read())[1:-1])'; }

          actor="${{ github.actor }}"
          repo="${{ github.repository }}"
          repo_url="https://github.com/${repo}"
          run_url="https://github.com/${repo}/actions/runs/${{ github.run_id }}"
          avatar="https://github.com/${actor}.png"
          ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          event="${{ github.event_name }}"

          TITLE=""
          DESC=""
          COLOR=5793266
          ICON="https://raw.githubusercontent.com/primer/octicons/main/icons/info-24.svg"
          FIELDS="[]"

          embed_url="$run_url"

          if [ "$event" = "workflow_dispatch" ]; then
            TITLE="🔔 Testbenachrichtigung"
            DESC="Manuell ausgelöst von **${actor}**\n${run_url}"
            COLOR=4437377
            ICON="https://raw.githubusercontent.com/primer/octicons/main/icons/bell-24.svg"
            FIELDS=$(jq -n --arg repo_url "$repo_url" '[{"name":"Repository","value":$repo_url}]')
          elif [ "$event" = "push" ]; then
            ref="${GITHUB_REF_NAME:-unknown}"
            sha="${GITHUB_SHA:-}"
            short_sha="${sha:0:7}"
            before="$(echo "$GH_EVENT_JSON" | jq -r '.before // ""')"
            compare_url="${repo_url}/compare/${before}...${sha}"

            COMMITS_RAW="$(echo "$GH_EVENT_JSON" | jq -r '
              (.commits // [])[0:10][]?
              | "- **" + (.id[0:7]) + "**: " + ((.message // "") | gsub("\n"; " ")) + "  — _" + ((.author.username // .author.name) // "unknown") + "_"
            ')"
            [ -z "$COMMITS_RAW" ] && COMMITS_RAW="- (keine Commits übermittelt)"
            COMMITS_ESC="$(printf "%s" "$COMMITS_RAW" | esc_json)"

            TITLE="📦 Push auf ${repo} — ${ref}"
            DESC="**Akteur:** ${actor}\n**Branch:** ${ref}\n**SHA:** \`${short_sha}\`\n**Vergleich:** ${compare_url}"
            COLOR=5814783
            ICON="https://raw.githubusercontent.com/primer/octicons/main/icons/upload-24.svg"
            embed_url="$compare_url"
            FIELDS=$(jq -n \
              --arg commits "$COMMITS_RAW" \
              --arg links "$(printf "• Repo: %s\n• Actions: %s" "$repo_url" "$run_url")" \
              '[{"name":"Commits (max 10)","value":$commits},{"name":"Links","value":$links}]')
          elif [ "$event" = "pull_request" ]; then
            pr_title='${{ github.event.pull_request.title }}'
            pr_num='${{ github.event.pull_request.number }}'
            pr_state='${{ github.event.pull_request.state }}'
            pr_merged='${{ github.event.pull_request.merged }}'
            pr_url='${{ github.event.pull_request.html_url }}'
            base='${{ github.event.pull_request.base.ref }}'
            head='${{ github.event.pull_request.head.ref }}'
            draft='${{ github.event.pull_request.draft }}'
            labels="$(echo "$GH_EVENT_JSON" | jq -r '[.pull_request.labels[]?.name] | select(length>0) | join(", ") // ""')"
            assignees="$(echo "$GH_EVENT_JSON" | jq -r '[.pull_request.assignees[]?.login] | select(length>0) | join(", ") // ""')"

            TITLE="🔀 PR #${pr_num}: ${pr_title}"
            status_emoji="🟢"
            [ "$pr_state" != "open" ] && status_emoji="🟡"
            [ "${pr_merged}" = "true" ] && status_emoji="🟣"
            [ "${draft}" = "true" ] && status_emoji="⚪"
            DESC="${status_emoji} **Status:** ${pr_state}  |  **Merged:** ${pr_merged}\n**Akteur:** ${actor}\n${pr_url}"
            COLOR=9055202
            ICON="https://raw.githubusercontent.com/primer/octicons/main/icons/git-pull-request-24.svg"
            embed_url="${pr_url}"
            FIELDS=$(jq -n \
              --arg base "$base" --arg head "$head" --arg repo_url "$repo_url" \
              --arg labels "$labels" --arg assignees "$assignees" \
              '[{"name":"Basis → Head","value":("`"+$base+"` → `"+$head+"`")},{"name":"Repository","value":$repo_url}] \
               + (if $labels != "" then [{"name":"Labels","value":$labels}] else [] end) \
               + (if $assignees != "" then [{"name":"Assignees","value":$assignees}] else [] end)')
          elif [ "$event" = "workflow_run" ]; then
            name='${{ github.event.workflow_run.name }}'
            conc='${{ github.event.workflow_run.conclusion }}'
            TITLE="🧪 CI: ${name}"
            case "$conc" in
              success) COLOR=4437377; status="✅ Erfolg";;
              failure) COLOR=13631488; status="❌ Fehlgeschlagen";;
              cancelled) COLOR=14540253; status="⏹️ Abgebrochen";;
              skipped) COLOR=15132390; status="⏭️ Übersprungen";;
              *) COLOR=8421504; status="ℹ️ ${conc}";;
            esac
            DESC="**Akteur:** ${actor}\n**Ergebnis:** ${status}\n${run_url}"
            ICON="https://raw.githubusercontent.com/primer/octicons/main/icons/checklist-24.svg"
            embed_url="$run_url"
            FIELDS=$(jq -n --arg name "$name" --arg repo_url "$repo_url" --arg run "$run_url" \
              '[{"name":"Workflow","value":$name},{"name":"Repository","value":$repo_url}]' \
              | jq --arg name "$name" --arg note "Image Scan (SARIF) & SBOM als Artefakte im Run verfügbar." \
                   --arg note2 "Health-Smoke Artefakte (server.log, healthz.json, readyz.json) im Run verfügbar." \
                    --arg note3 "Metrics-Smoke Artefakte (server.log, metrics.txt) im Run verfügbar." \
                'if $name == "docker-release" then . + [{"name":"Artefakte","value":$note}] elif $name == "health-smoke" then . + [{"name":"Artefakte","value":$note2}] elif $name == "metrics-smoke" then . + [{"name":"Artefakte","value":$note3}] else . end')
          elif [ "$event" = "release" ]; then
            tag='${{ github.event.release.tag_name }}'
            rname='${{ github.event.release.name }}'
            rurl='${{ github.event.release.html_url }}'
            [ -z "$rurl" ] && rurl="${repo_url}/releases/tag/${tag}"

            TITLE="🏷️ Release ${tag}"
            [ -n "$rname" ] && TITLE="🏷️ ${rname} (${tag})"
            DESC="**Repository:** ${repo}\n**Akteur:** ${actor}\n**Release:** ${rurl}"
            COLOR=5793266
            ICON="https://raw.githubusercontent.com/primer/octicons/main/icons/tag-24.svg"
            embed_url="$rurl"

            version="${tag#v}"
            CHANGELOG_SECTION=""
            if [ -f CHANGELOG.md ]; then
              CHANGELOG_SECTION="$(awk -v ver="$version" '
                BEGIN{found=0}
                tolower($0) ~ "^##[[:space:]]*\\[?v?" tolower(ver) "\\]?" { if(!found){found=1; next} }
                found && /^##[[:space:]]*\[?v?[0-9]/ {exit}
                found {print}
              ' CHANGELOG.md)"
            fi
            release_body="$(echo "$GH_EVENT_JSON" | jq -r '.release.body // ""')"
            TEXT="$release_body"
            [ -z "$TEXT" ] && TEXT="$CHANGELOG_SECTION"
            [ -z "$TEXT" ] && TEXT="(Keine Release-Notes/Changelog gefunden.)"
            CLEAN_SECTION="$(printf '%s' "$TEXT")"
            if [ "${#CLEAN_SECTION}" -gt 1800 ]; then
              CLEAN_SECTION="${CLEAN_SECTION:0:1800}\n… (gekürzt)"
            fi

            FIELDS=$(jq -n \
              --arg changes "$CLEAN_SECTION" \
              --arg links "$(printf "• Repo: %s\n• Actions: %s\n• Tag: %s" "$repo_url" "$run_url" "$rurl")" \
              '[{"name":"Release Notes / Changelog","value":$changes},{"name":"Links","value":$links}]')
          fi

          jq -n \
            --arg username "GitHub · ${repo}" \
            --arg avatar_url "${avatar}" \
            --arg title "$TITLE" \
            --arg description "$DESC" \
            --arg ts "${ts}" \
            --arg icon "${ICON}" \
            --arg date "$(date -u +%Y-%m-%d)" \
            --argjson fields "$FIELDS" \
            --arg color "${COLOR}" \
            --arg url "$embed_url" \
            --arg author_name "$actor" \
            --arg author_url "https://github.com/${actor}" \
            --arg author_icon "$avatar" \
            '{username:$username, avatar_url:$avatar_url, embeds:[{title:$title, url:$url, description:$description, color:($color|tonumber), timestamp:$ts, thumbnail:{url:$icon}, author:{name:$author_name, url:$author_url, icon_url:$author_icon}, fields:$fields, footer:{text:("Automatische Benachrichtigung • " + $date)}}]}' \
            > payload.json

          # als Ausgabe (base64) für den nächsten Step
          base64 -w0 < payload.json > payload.b64 || base64 < payload.json > payload.b64
          echo "payload=$(cat payload.b64)" >> "$GITHUB_OUTPUT"

      - name: Send to Discord (with retry)
        continue-on-error: true
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          WEBHOOK_CI: ${{ secrets.DISCORD_WEBHOOK_CI }}
        shell: bash
        run: |
          set -euo pipefail
          # Wähle Kanal: für workflow_run (CI-Status) bevorzugt CI-Hook, andernfalls Default
          URL="$WEBHOOK"
          if [ "${{ github.event_name }}" = "workflow_run" ] && [ -n "${WEBHOOK_CI:-}" ]; then
            URL="$WEBHOOK_CI"
          fi
          test -n "${URL:-}" || { echo "::error::Secret DISCORD_WEBHOOK (oder _CI) fehlt"; exit 1; }
          # base64 decode (Linux/macOS compatible)
          echo "${{ steps.build.outputs.payload }}" | base64 -d > payload.json || echo "${{ steps.build.outputs.payload }}" | base64 -D > payload.json

          # bis zu 5 Versuche (z.B. bei 429 Rate Limit)
          for i in 1 2 3 4 5; do
            http_code=$(curl -sS -H "Content-Type: application/json" -d @payload.json "$URL" -o resp.txt -w "%{http_code}" || echo "000")
            echo "Discord HTTP: $http_code (try $i)"
            if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
              echo "OK"; break
            fi
            echo "Antwort:"
            cat resp.txt || true
            sleep $((i*2))
          done

          # finaler Check
          if [ "$http_code" -lt 200 ] || [ "$http_code" -ge 300 ]; then
            echo "::warning::Discord-Request fehlgeschlagen (HTTP $http_code); Workflow wird nicht blockiert."
          fi
