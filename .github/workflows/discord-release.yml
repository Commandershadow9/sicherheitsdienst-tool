name: Notify Discord (Releases & Tags mit Changelog)

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'   # feuert bei Tags wie v0.1.0, v1.2.3

jobs:
  notify-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build message (mit Changelog)
        id: build
        shell: bash
        run: |
          set -euo pipefail

          # 1) Kontext-Variablen
          REPO="${{ github.repository }}"
          ACTOR="${{ github.actor }}"
          RUN_URL="https://github.com/${REPO}/actions/runs/${{ github.run_id }}"
          HTML_REPO_URL="https://github.com/${REPO}"

          # Tag/Version ermitteln (Release-Event oder Tag-Push)
          TAG="${{ github.event.release.tag_name || github.ref_name }}"
          [ -z "${TAG}" ] && TAG="${GITHUB_REF_NAME:-unknown}"
          VERSION="${TAG#v}"  # 'v0.1.0' -> '0.1.0'

          RELEASE_NAME="${{ github.event.release.name || '' }}"
          RELEASE_URL="${{ github.event.release.html_url || '' }}"
          [ -z "$RELEASE_URL" ] && RELEASE_URL="${HTML_REPO_URL}/releases/tag/${TAG}"

          # 2) Changelog-Ausschnitt extrahieren
          # Unterst√ºtzt √úberschriften wie:
          #   ## v0.1.0 - 2025-09-01
          #   ## 0.1.0
          #   ## [0.1.0] - ...
          CHANGELOG_SECTION=""
          if [ -f CHANGELOG.md ]; then
            CHANGELOG_SECTION="$(awk -v ver="$VERSION" '
              BEGIN{found=0}
              # Start, wenn Zeile mit "##" und passender Versionsnummer (mit/ohne v, mit/ohne [ ])
              tolower($0) ~ "^##[[:space:]]*\\[?v?" tolower(ver) "\\]?" {
                if(!found){found=1; next}
              }
              # Ende beim n√§chsten Versions-Heading
              found && /^##[[:space:]]*\[?v?[0-9]/ {exit}
              found {print}
            ' CHANGELOG.md)"
          fi

          if [ -z "$CHANGELOG_SECTION" ]; then
            CHANGELOG_SECTION="(Kein spezifischer Changelog-Eintrag f√ºr ${TAG} gefunden. Bitte CHANGELOG.md pr√ºfen.)"
          fi

          # 3) Changelog h√ºbsch k√ºrzen (Discord Limit ~2000 Zeichen; Embed-Field ~1024 ist safe)
          # Wir nehmen <= 1800 gesamt f√ºr die Description oder packen in eigenes Field (<= 1024)
          # Hier -> in ein Field; hart auf 1000 Zeichen k√ºrzen, Rest mit "‚Ä¶"
          MAX_FIELD=1000
          CLEAN_SECTION="$(printf '%s' "$CHANGELOG_SECTION" | sed 's/\r$//')"
          LEN=${#CLEAN_SECTION}
          if [ "$LEN" -gt "$MAX_FIELD" ]; then
            CLEAN_SECTION="${CLEAN_SECTION:0:$MAX_FIELD}\n‚Ä¶ (gek√ºrzt)"
          fi

          # 4) JSON-escaping via Python (robust)
          esc() { python3 - << 'PY'
import sys, json
print(json.dumps(sys.stdin.read())[1:-1])
PY
          }

          TITLE="üè∑Ô∏è Release ${TAG}"
          [ -n "$RELEASE_NAME" ] && TITLE="üè∑Ô∏è ${RELEASE_NAME} (${TAG})"

          DESC="**Repository:** ${REPO}\n**Akteur:** ${ACTOR}\n**Release:** ${RELEASE_URL}"
          DESC_ESCAPED="$(printf '%s' "$DESC" | esc)"

          FIELD_NAME="√Ñnderungen (CHANGELOG)"
          FIELD_VALUE_ESCAPED="$(printf '%s' "$CLEAN_SECTION" | esc)"

          # Farbe (hex 0x58A6FF -> GitHub Blau) als int
          COLOR=5814783

          # ISO-Zeitstempel jetzt
          TS="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

          # 5) Discord-Embed bauen
          cat > payload.json <<JSON
{
  "embeds": [
    {
      "title": "$(printf '%s' "$TITLE" | esc)",
      "description": "$DESC_ESCAPED",
      "color": $COLOR,
      "timestamp": "$TS",
      "fields": [
        {
          "name": "$(printf '%s' "$FIELD_NAME" | esc)",
          "value": "$FIELD_VALUE_ESCAPED"
        },
        {
          "name": "Links",
          "value": "$(printf '%s' "‚Ä¢ Repo: ${HTML_REPO_URL}\n‚Ä¢ Actions: ${RUN_URL}\n‚Ä¢ Tag: ${RELEASE_URL}" | esc)"
        }
      ],
      "footer": { "text": "Automatische Release-Benachrichtigung" }
    }
  ]
}
JSON

          echo "payload=$(cat payload.json | base64 -w0)" >> $GITHUB_OUTPUT

      - name: Send to Discord
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          echo "$WEBHOOK" | grep -qE '^https://(ptb\.)?discord(app)?\.com/api/webhooks/' || { echo "Webhook-URL fehlt/ung√ºltig"; exit 1; }
          echo "${{ steps.build.outputs.payload }}" | base64 -d > payload.json
          curl -sS -H "Content-Type: application/json" -d @payload.json "$WEBHOOK" -o /dev/null -w "%{http_code}\n"

