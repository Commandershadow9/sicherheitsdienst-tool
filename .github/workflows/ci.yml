name: ci

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18, 20, 22]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json

      # Root-Install, falls du im Root Skripte hast (optional, bleibt folgenlos wenn kein package.json da ist)
      - name: Install deps (root)
        if: ${{ hashFiles('package.json') != '' }}
        run: |
          (npm ci --no-audit --prefer-offline || npm install --no-audit)

      # Backend-Install (dein eigentlicher Code)
      - name: Install deps (backend)
        if: ${{ hashFiles('backend/package.json') != '' }}
        working-directory: backend
        run: |
          (npm ci --no-audit --prefer-offline || npm install --no-audit)

      - name: Generate Prisma Client (backend)
        if: ${{ hashFiles('backend/package.json') != '' }}
        working-directory: backend
        run: npx prisma generate

      - name: Typecheck backend
        if: ${{ hashFiles('backend/package.json') != '' }}
        working-directory: backend
        run: npm run typecheck --if-present

      - name: Build backend
        if: ${{ hashFiles('backend/package.json') != '' }}
        working-directory: backend
        run: npm run build --if-present

      - name: Test backend (with coverage)
        if: ${{ hashFiles('backend/package.json') != '' }}
        working-directory: backend
        run: npm run test:coverage --if-present

      - name: Upload coverage artifact
        if: ${{ hashFiles('backend/coverage/lcov.info') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: backend/coverage

  openapi-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Validate OpenAPI (swagger-cli)
        run: npx --yes swagger-cli@latest validate docs/openapi.yaml

      - name: Lint OpenAPI (Redocly via npx)
        # Lint lÃ¤uft, aber Warnungen sollen den Job NICHT fehlschlagen lassen
        run: npx --yes @redocly/cli@latest lint docs/openapi.yaml --format=github || true

  health-smoke:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install & Build (backend)
        working-directory: backend
        run: |
          (npm ci --no-audit --prefer-offline || npm install --no-audit)
          npm run build --if-present

      - name: Ensure jq
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Start app (PORT 3000)
        working-directory: backend
        run: |
          set -euo pipefail
          PORT=3000 node dist/server.js > server.log 2>&1 & echo $! > server.pid
          # Wait up to 30s for /healthz to respond
          for i in $(seq 1 30); do
            if curl -fsS http://localhost:3000/healthz >/dev/null; then
              echo "App is up"
              exit 0
            fi
            sleep 1
          done
          echo "App failed to start in time" >&2
          exit 1

      - name: Smoke: /healthz
        run: |
          curl -sSf http://localhost:3000/healthz | jq -e '.status=="ok"'

      - name: Smoke: /readyz
        run: |
          curl -sSf http://localhost:3000/readyz | jq -e '.status=="ready" or .status=="not-ready"'

      - name: Dump server logs on failure
        if: failure()
        working-directory: backend
        run: |
          echo '======= server.log (last 300 lines) ======='
          tail -n 300 server.log || true
          echo '==========================================='

      - name: Stop app
        if: always()
        working-directory: backend
        run: |
          kill $(cat server.pid) || true
