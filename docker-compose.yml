version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: sicherheitsdienst-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sicherheitsdienst_db}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin123}
    ports:
      - '5432:5432'
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - sicherheitsdienst-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-sicherheitsdienst_db}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Node.js)
  api:
    build:
      context: ./backend
    container_name: sicherheitsdienst-api
    environment:
      NODE_ENV: production
      PORT: 3001
      # Adjust to your DB credentials or override via environment
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@db:5432/${POSTGRES_DB:-sicherheitsdienst_db}?schema=public}
      JWT_SECRET: ${JWT_SECRET:-changeme-in-env}
      # Optional Refresh/SMTP envs are passed if defined host-side
      REFRESH_SECRET: ${REFRESH_SECRET:-}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-}
      REFRESH_EXPIRES_IN: ${REFRESH_EXPIRES_IN:-}
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      SMTP_FROM: ${SMTP_FROM:-}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      MOBILE_APP_URL: ${MOBILE_APP_URL:-http://localhost:19000}
      # Optional: Redis fÃ¼r Rate-Limiting-Store
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      # Auth-Rate-Limits (IP-basiert)
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-10}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
    ports:
      - '3001:3001'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - sicherheitsdienst-network
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:3001/api/health || exit 1']
      interval: 15s
      timeout: 5s
      retries: 10
    # Run DB migrations before starting the server
    command: >
      sh -c "npx prisma migrate deploy &&
             node dist/server.js"

  # Redis (optional, Rate-Limit Store)
  redis:
    image: redis:7-alpine
    container_name: sicherheitsdienst-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    networks:
      - sicherheitsdienst-network

  # pgAdmin (Datenbank-Verwaltung)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: sicherheitsdienst-pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin123}
    ports:
      - '8080:80'
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sicherheitsdienst-network
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider -q http://localhost:80 || exit 1']
      interval: 15s
      timeout: 5s
      retries: 10

volumes:
  db-data:

networks:
  sicherheitsdienst-network:
    driver: bridge
